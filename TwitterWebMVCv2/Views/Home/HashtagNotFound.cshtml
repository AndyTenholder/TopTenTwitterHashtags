@model TwitterWebMVCv2.ViewModels.TopTenViewModel
@{
    ViewData["Title"] = "Top 10 #s";
}

<style>
    a {
        color: inherit;
        text-decoration: inherit;
    }

        a:hover {
            color: inherit;
            text-decoration: inherit;
        }

    .tableData:hover {
        background-color: #0084b4;
        color: white;
    }

    .fade {
        opacity: 0.35;
    }

    .buttonSet {
        display: flex;
        justify-content: center;
    }

    .button {
        width: 17%;
        outline: none;
        border: none;
        border-radius: 8px;
        color: white;
        padding: 10px 10px 10px 10px;
        margin: 5px 2px 5px 2px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: .8em;
    }

    .error {
        color: red;
        font-size: 1.5em;
    }

    .button:hover {
        opacity: 0.70;
    }

    .hashtag0Button {
        background-color: #0074D9;
    }

    .hashtag1Button {
        background-color: #00b7ff;
    }

    .hashtag2Button {
        background-color: #00cccc;
    }

    .hashtag3Button {
        background-color: #00b765;
    }

    .hashtag4Button {
        background-color: #00c616;
    }

    .hashtag5Button {
        background-color: #ffc700;
    }

    .hashtag6Button {
        background-color: #ff7600;
    }

    .hashtag7Button {
        background-color: #dd0c00;
    }

    .hashtag8Button {
        background-color: #930047;
    }

    .hashtag9Button {
        background-color: #9200a8;
    }

    input:invalid + span:after {
        content: '✖';
        padding-left: 5px;
    }

    input:valid + span:after {
        content: '✓';
        padding-left: 5px;
    }
</style>
<br />

@*Template to hold an option for each hashtag in the database*@
@*Template is used to populate the datalist*@
@*Script to populate datalist in script tag below*@
<template id="resultstemplate">
    @foreach (var hashtagOne in Model.HashtagsAll)
    {
    <option>@hashtagOne.Name</option>
    }
</template>

@{ if (Model.SearchError)
    {
    <span class="error">***Hashtag not found.***</span>
    }
}

@*Datalist used to auto populate choices in search bar*@
<datalist id="searchresults"></datalist>


<h1>
    The Top 10
    @*SVG Twitter bird image*@
    <svg viewbox="0 0 2000 1625.36"
         width="43"
         height="35"
         version="1.1"
         xmlns="http://www.w3.org/2000/svg">
        <path d="m 1999.9999,192.4 c -73.58,32.64 -152.67,54.69 -235.66,64.61 84.7,-50.78 149.77,-131.19 180.41,-227.01 -79.29,47.03 -167.1,81.17 -260.57,99.57 C 1609.3399,49.82 1502.6999,0 1384.6799,0 c -226.6,0 -410.328,183.71 -410.328,410.31 0,32.16 3.628,63.48 10.625,93.51 -341.016,-17.11 -643.368,-180.47 -845.739,-428.72 -35.324,60.6 -55.5583,131.09 -55.5583,206.29 0,142.36 72.4373,267.95 182.5433,341.53 -67.262,-2.13 -130.535,-20.59 -185.8519,-51.32 -0.039,1.71 -0.039,3.42 -0.039,5.16 0,198.803 141.441,364.635 329.145,402.342 -34.426,9.375 -70.676,14.395 -108.098,14.395 -26.441,0 -52.145,-2.578 -77.203,-7.364 52.215,163.008 203.75,281.649 383.304,284.946 -140.429,110.062 -317.351,175.66 -509.5972,175.66 -33.1211,0 -65.7851,-1.949 -97.8828,-5.738 181.586,116.4176 397.27,184.359 628.988,184.359 754.732,0 1167.462,-625.238 1167.462,-1167.47 0,-17.79 -0.41,-35.48 -1.2,-53.08 80.1799,-57.86 149.7399,-130.12 204.7499,-212.41"
              style="fill:#00aced" />
    </svg>
    #s!
</h1>
@{ if (Model.DateTimeError)
    {
    <span class="error">Sorry, can't tell the future. Try again :)</span>
    }
}
@*Form that allows users to choose their own starting point for the Top Ten Data*@
@*Will initially show as current date and time minus one hour*@
@*Date selector is restricted to days between Jan 1, 2018 and current date*@
@*Display changes in different browsers*@
@*Does not have mobile support*@
<form asp-controller="Home" asp-action="Index" method="post">
    <label for="date">Date:</label>
    <input name="date" type="date" id="date" value="@Model.DateTimeUser.ToString("yyyy'-'MM'-'dd")" min="2018-01-01" max="@Model.DateTimeNow.ToString("yyyy'-'MM'-'dd")" required pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}" />
    <span class="validity"></span>
    <label for="time">Time:</label>
    <input name="time" type="time" id="time" value="@Model.DateTimeUser.ToString("HH:mm")" min="00:00" max="23:59" required pattern="[0-9]{2}:[0-9]{2}" />
    <span class="validity"></span>
    <input type="submit" value="Search" />
</form>


@{
    if (Model.HourHashtagCounts.Count > 9)
    {
    <h4>Click on # below for more info.</h4>
    @*Set up table to display top 10 data *@
    <table class="table">
        <tr>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[0].Hashtag.ID">
                    <ol><li value="1"><p>@Model.HourHashtagCounts[0].HashtagName - @Model.HourHashtagCounts[0].TimesUsed</p></li></ol>
                </a>
            </td>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[5].Hashtag.ID">
                    <ol><li value="6"><p>@Model.HourHashtagCounts[5].HashtagName - @Model.HourHashtagCounts[5].TimesUsed</p></li></ol>
                </a>
            </td>
        </tr>
        <tr>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[1].Hashtag.ID">
                    <ol><li value="2"><p>@Model.HourHashtagCounts[1].HashtagName - @Model.HourHashtagCounts[1].TimesUsed</p></li></ol>
                </a>
            </td>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[6].Hashtag.ID">
                    <ol><li value="7"><p>@Model.HourHashtagCounts[6].HashtagName - @Model.HourHashtagCounts[6].TimesUsed</p></li></ol>
                </a>
            </td>
        </tr>
        <tr>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[2].Hashtag.ID">
                    <ol><li value="3"><p>@Model.HourHashtagCounts[2].HashtagName - @Model.HourHashtagCounts[2].TimesUsed</p></li></ol>
                </a>
            </td>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[7].Hashtag.ID">
                    <ol><li value="8"><p>@Model.HourHashtagCounts[7].HashtagName - @Model.HourHashtagCounts[7].TimesUsed</p></li></ol>
                </a>
            </td>
        </tr>
        <tr>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[3].Hashtag.ID">
                    <ol><li value="4"><p>@Model.HourHashtagCounts[3].HashtagName - @Model.HourHashtagCounts[3].TimesUsed</p></li></ol>
                </a>
            </td>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[8].Hashtag.ID">
                    <ol><li value="9"><p>@Model.HourHashtagCounts[8].HashtagName - @Model.HourHashtagCounts[8].TimesUsed</p></li></ol>
                </a>
            </td>
        </tr>
        <tr>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[4].Hashtag.ID">
                    <ol><li value="5"><p>@Model.HourHashtagCounts[4].HashtagName - @Model.HourHashtagCounts[4].TimesUsed</p></li></ol>
                </a>
            </td>
            <td class="tableData">
                <a asp-controller="Hashtag" asp-action="Index" asp-route-id="@Model.HourHashtagCounts[9].Hashtag.ID">
                    <ol><li value="10"><p>@Model.HourHashtagCounts[9].HashtagName - @Model.HourHashtagCounts[9].TimesUsed</p></li></ol>
                </a>
            </td>
        </tr>
    </table>

    @*Tweets Each Hour Line Graph Datasets*@

        List<int> hashtag0DataList = new List<int>();
        List<int> hashtag1DataList = new List<int>();
        List<int> hashtag2DataList = new List<int>();
        List<int> hashtag3DataList = new List<int>();
        List<int> hashtag4DataList = new List<int>();
        List<int> hashtag5DataList = new List<int>();
        List<int> hashtag6DataList = new List<int>();
        List<int> hashtag7DataList = new List<int>();
        List<int> hashtag8DataList = new List<int>();
        List<int> hashtag9DataList = new List<int>();

        for (int i = 0; i < 12; i++)
        {
            hashtag0DataList.Add(Model.HourHashtagCounts[0].TweetsPer[i]);
            hashtag1DataList.Add(Model.HourHashtagCounts[1].TweetsPer[i]);
            hashtag2DataList.Add(Model.HourHashtagCounts[2].TweetsPer[i]);
            hashtag3DataList.Add(Model.HourHashtagCounts[3].TweetsPer[i]);
            hashtag4DataList.Add(Model.HourHashtagCounts[4].TweetsPer[i]);
            hashtag5DataList.Add(Model.HourHashtagCounts[5].TweetsPer[i]);
            hashtag6DataList.Add(Model.HourHashtagCounts[6].TweetsPer[i]);
            hashtag7DataList.Add(Model.HourHashtagCounts[7].TweetsPer[i]);
            hashtag8DataList.Add(Model.HourHashtagCounts[8].TweetsPer[i]);
            hashtag9DataList.Add(Model.HourHashtagCounts[9].TweetsPer[i]);
        }

    @*graph made using the Charts.js Lib http://www.chartjs.org/*@
    <canvas id="GraphCanvas"></canvas>

    @*buttons will be used to toggle data for each hashtag on and off in the graph*@
    <div id="buttonSetTop" class="buttonSet">
        <button id="hashtag0Button" class="button hashtag0Button">@Model.HourHashtagCounts[0].Hashtag.Name.ToString()</button>
        <button id="hashtag1Button" class="button hashtag1Button fade">@Model.HourHashtagCounts[1].Hashtag.Name.ToString()</button>
        <button id="hashtag2Button" class="button hashtag2Button">@Model.HourHashtagCounts[2].Hashtag.Name.ToString()</button>
        <button id="hashtag3Button" class="button hashtag3Button fade">@Model.HourHashtagCounts[3].Hashtag.Name.ToString()</button>
        <button id="hashtag4Button" class="button hashtag4Button">@Model.HourHashtagCounts[4].Hashtag.Name.ToString()</button>
    </div>
    <div id="buttonSetBotton" class="buttonSet">
        <button id="hashtag5Button" class="button hashtag5Button fade">@Model.HourHashtagCounts[5].Hashtag.Name.ToString()</button>
        <button id="hashtag6Button" class="button hashtag6Button">@Model.HourHashtagCounts[6].Hashtag.Name.ToString()</button>
        <button id="hashtag7Button" class="button hashtag7Button fade">@Model.HourHashtagCounts[7].Hashtag.Name.ToString()</button>
        <button id="hashtag8Button" class="button hashtag8Button">@Model.HourHashtagCounts[8].Hashtag.Name.ToString()</button>
        <button id="hashtag9Button" class="button hashtag9Button fade">@Model.HourHashtagCounts[9].Hashtag.Name.ToString()</button>
    </div>
    <br />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.bundle.min.js"></script>
    <script>

                @*convert C# lists of hashtag data to JSON*@
                var hashtag0DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag0DataList));
                var hashtag1DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag1DataList));
                var hashtag2DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag2DataList));
                var hashtag3DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag3DataList));
                var hashtag4DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag4DataList));
                var hashtag5DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag5DataList));
                var hashtag6DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag6DataList));
                var hashtag7DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag7DataList));
                var hashtag8DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag8DataList));
                var hashtag9DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag9DataList));

                @*Retrieve and save the string name of each hashtag*@
                var hashtag0Name = "@Model.HourHashtagCounts[0].HashtagName.ToString()";
                var hashtag1Name = "@Model.HourHashtagCounts[1].HashtagName.ToString()";
                var hashtag2Name = "@Model.HourHashtagCounts[2].HashtagName.ToString()";
                var hashtag3Name = "@Model.HourHashtagCounts[3].HashtagName.ToString()";
                var hashtag4Name = "@Model.HourHashtagCounts[4].HashtagName.ToString()";
                var hashtag5Name = "@Model.HourHashtagCounts[5].HashtagName.ToString()";
                var hashtag6Name = "@Model.HourHashtagCounts[6].HashtagName.ToString()";
                var hashtag7Name = "@Model.HourHashtagCounts[7].HashtagName.ToString()";
                var hashtag8Name = "@Model.HourHashtagCounts[8].HashtagName.ToString()";
                var hashtag9Name = "@Model.HourHashtagCounts[9].HashtagName.ToString()";

                @*Boolean to save hashtag button state *@
                @*On load all odd number hashtags will be turned on*@
                @*Turned these on to give user clue that they could be toggeled on and off*@
                var hashtag0ButtonIsOn = true;
                var hashtag1ButtonIsOn = false;
                var hashtag2ButtonIsOn = true;
                var hashtag3ButtonIsOn = false;
                var hashtag4ButtonIsOn = true;
                var hashtag5ButtonIsOn = false;
                var hashtag6ButtonIsOn = true;
                var hashtag7ButtonIsOn = false;
                var hashtag8ButtonIsOn = true;
                var hashtag9ButtonIsOn = false;

                @*Colors for each hashtag*@
                var hashtag0Color = "#0074D9";
                var hashtag1Color = "#00b7ff";
                var hashtag2Color = "#00cccc";
                var hashtag3Color = "#00b765";
                var hashtag4Color = "#00c616";
                var hashtag5Color = "#ffc700";
                var hashtag6Color = "#ff7600";
                var hashtag7Color = "#dd0c00";
                var hashtag8Color = "#930047";
                var hashtag9Color = "#9200a8";

                @* Constats to be used as labels for the X axis of the graph*@
                var MINUTESAGO = ["5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60"];

                @*Logic for Charts.js line graph*@
                var Graph = {
                    type: 'line',
                    data: {
                        labels: MINUTESAGO,
                        datasets: [{
                            label: hashtag0Name,
                            backgroundColor: hashtag0Color,
                            borderColor: hashtag0Color,
                            data: hashtag0DataListJSON,
                            fill: false
                        },{
                            label: hashtag2Name,
                            backgroundColor: hashtag2Color,
                            borderColor: hashtag2Color,
                            data: hashtag2DataListJSON,
                            fill: false
                        },{
                            label: hashtag4Name,
                            backgroundColor: hashtag4Color,
                            borderColor: hashtag4Color,
                            data: hashtag4DataListJSON,
                            fill: false
                        }, {
                            label: hashtag6Name,
                            backgroundColor: hashtag6Color,
                            borderColor: hashtag6Color,
                            data: hashtag6DataListJSON,
                            fill: false
                        }, {
                            label: hashtag8Name,
                            backgroundColor: hashtag8Color,
                            borderColor: hashtag8Color,
                            data: hashtag8DataListJSON,
                            fill: false
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: "Tweets"
                                }
                            }],
                            xAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: "Minutes Ago"
                                }
                            }]
                        },
                        @*tooltips and hover cause label to appear at data point the cursor is closest to*@
                        tooltips: {
                            mode: 'index',
                            intersect: false
                        },
                        hover: {
                            mode: "nearest",
                            intersect: true
                        },
                        responsive: true,
                        maintainAspectRatio: true
                    }
                };

                @*Load linegraph on page load*@
                window.onload = function () {
                    var ctx = document.getElementById("GraphCanvas").getContext("2d");
                    window.myLine = new Chart(ctx, Graph);
                };

                @*Add a dataset to the linegraph*@
                function addDataset(labelName, color, dataList) {
                    var newDataset = {
                        label: labelName,
                        backgroundColor: color,
                        borderColor: color,
                        data: dataList,
                        fill: false
                    };
                    Graph.data.datasets.push(newDataset);
                }

                @*Remove a dataset from the graph where the label name equals the search term*@
                function removeDataset(searchTerm) {
                    var pos = -1;
                    var len = Graph.data.datasets.length;
                    for (var i = 0; i < len; i++) {
                        if (Graph.data.datasets[i].label === searchTerm) {
                            pos = i;
                            break;
                        }
                    }
                    Graph.data.datasets.splice(pos, 1);
                }

                @*Toggles button background opacity*@
                function toggleButtonFade(buttonId) {
                    var element = document.getElementById(buttonId);
                    element.classList.toggle("fade");
                }

                @*Populates datalist "searchresults" with options in template "resultstamplate*@
                @*Then uses the datalist to create <=10 search suggestions that update with each user input*@
                var search = document.querySelector('#search');
                var results = document.querySelector('#searchresults');
                var templateContent = document.querySelector('#resultstemplate').content;
                search.addEventListener('keyup', function handler(event) {
                    while (results.children.length) results.removeChild(results.firstChild);
                    var inputVal = new RegExp(search.value.trim(), 'i');
                    var clonedOptions = templateContent.cloneNode(true);
                    var set = Array.prototype.reduce.call(clonedOptions.children, function searchFilter(frag, el) {
                        if (inputVal.test(el.textContent) && frag.children.length < 8) frag.appendChild(el);
                        return frag;
                    }, document.createDocumentFragment());
                    results.appendChild(set);
                });


                @*Set on click listener for each button*@
                @*If button is already on, remove the corresponding data set*@
                @*If the button is off, add dataset to the graph*@
                @*toggle the button and then update the canvas*@

                document.getElementById("hashtag0Button").addEventListener("click", function () {
                    if (hashtag0ButtonIsOn) {
                        removeDataset(hashtag0Name);
                    } else {
                        addDataset(hashtag0Name, hashtag0Color, hashtag0DataListJSON)
                    };
                    hashtag0ButtonIsOn = !hashtag0ButtonIsOn;
                    toggleButtonFade("hashtag0Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag1Button").addEventListener("click", function () {
                    if (hashtag1ButtonIsOn) {
                        removeDataset(hashtag1Name);
                    } else {
                        addDataset(hashtag1Name, hashtag1Color, hashtag1DataListJSON)
                    };
                    hashtag1ButtonIsOn = !hashtag1ButtonIsOn;
                    toggleButtonFade("hashtag1Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag2Button").addEventListener("click", function () {
                    if (hashtag2ButtonIsOn) {
                        removeDataset(hashtag2Name);
                    } else {
                        addDataset(hashtag2Name, hashtag2Color, hashtag2DataListJSON)
                    };
                    hashtag2ButtonIsOn = !hashtag2ButtonIsOn;
                    toggleButtonFade("hashtag2Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag3Button").addEventListener("click", function () {
                    if (hashtag3ButtonIsOn) {
                        removeDataset(hashtag3Name);
                    } else {
                        addDataset(hashtag3Name, hashtag3Color, hashtag3DataListJSON)
                    };
                    hashtag3ButtonIsOn = !hashtag3ButtonIsOn;
                    toggleButtonFade("hashtag3Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag4Button").addEventListener("click", function () {
                    if (hashtag4ButtonIsOn) {
                        removeDataset(hashtag4Name);
                    } else {
                        addDataset(hashtag4Name, hashtag4Color, hashtag4DataListJSON)
                    };
                    hashtag4ButtonIsOn = !hashtag4ButtonIsOn;
                    toggleButtonFade("hashtag4Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag5Button").addEventListener("click", function () {
                    if (hashtag5ButtonIsOn) {
                        removeDataset(hashtag5Name);
                    } else {
                        addDataset(hashtag5Name, hashtag5Color, hashtag5DataListJSON)
                    };
                    hashtag5ButtonIsOn = !hashtag5ButtonIsOn;
                    toggleButtonFade("hashtag5Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag6Button").addEventListener("click", function () {
                    if (hashtag6ButtonIsOn) {
                        removeDataset(hashtag6Name);
                    } else {
                        addDataset(hashtag6Name, hashtag6Color, hashtag6DataListJSON)
                    };
                    hashtag6ButtonIsOn = !hashtag6ButtonIsOn;
                    toggleButtonFade("hashtag6Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag7Button").addEventListener("click", function () {
                    if (hashtag7ButtonIsOn) {
                        removeDataset(hashtag7Name);
                    } else {
                        addDataset(hashtag7Name, hashtag7Color, hashtag7DataListJSON)
                    };
                    hashtag7ButtonIsOn = !hashtag7ButtonIsOn;
                    toggleButtonFade("hashtag7Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag8Button").addEventListener("click", function () {
                    if (hashtag8ButtonIsOn) {
                        removeDataset(hashtag8Name);
                    } else {
                        addDataset(hashtag8Name, hashtag8Color, hashtag8DataListJSON)
                    };
                    hashtag8ButtonIsOn = !hashtag8ButtonIsOn;
                    toggleButtonFade("hashtag8Button")
                    window.myLine.update();
                });

                document.getElementById("hashtag9Button").addEventListener("click", function () {
                    if (hashtag9ButtonIsOn) {
                        removeDataset(hashtag9Name);
                    } else {
                        addDataset(hashtag9Name, hashtag9Color, hashtag9DataListJSON)
                    };
                    hashtag9ButtonIsOn = !hashtag9ButtonIsOn;
                    toggleButtonFade("hashtag9Button")
                    window.myLine.update();
                });
    </script>

    }
    else
    {
    <h1>No input for this time period</h1>

    }


}
