@model TwitterWebMVCv2.ViewModels.HomeViewModel
@{
    ViewData["Title"] = "Top 10 #s";
}

<h1>
    The Top 10
    @*SVG Twitter bird image*@
    <svg viewbox="0 0 2000 1625.36"
         width="43"
         height="35"
         version="1.1"
         xmlns="http://www.w3.org/2000/svg">
        <path d="m 1999.9999,192.4 c -73.58,32.64 -152.67,54.69 -235.66,64.61 84.7,-50.78 149.77,-131.19 180.41,-227.01 -79.29,47.03 -167.1,81.17 -260.57,99.57 C 1609.3399,49.82 1502.6999,0 1384.6799,0 c -226.6,0 -410.328,183.71 -410.328,410.31 0,32.16 3.628,63.48 10.625,93.51 -341.016,-17.11 -643.368,-180.47 -845.739,-428.72 -35.324,60.6 -55.5583,131.09 -55.5583,206.29 0,142.36 72.4373,267.95 182.5433,341.53 -67.262,-2.13 -130.535,-20.59 -185.8519,-51.32 -0.039,1.71 -0.039,3.42 -0.039,5.16 0,198.803 141.441,364.635 329.145,402.342 -34.426,9.375 -70.676,14.395 -108.098,14.395 -26.441,0 -52.145,-2.578 -77.203,-7.364 52.215,163.008 203.75,281.649 383.304,284.946 -140.429,110.062 -317.351,175.66 -509.5972,175.66 -33.1211,0 -65.7851,-1.949 -97.8828,-5.738 181.586,116.4176 397.27,184.359 628.988,184.359 754.732,0 1167.462,-625.238 1167.462,-1167.47 0,-17.79 -0.41,-35.48 -1.2,-53.08 80.1799,-57.86 149.7399,-130.12 204.7499,-212.41"
              style="fill:#00aced" />
    </svg>
    #Hashtags!
</h1>

<button id="getHourData">Hour</button>
<button id="getDayData">Day</button>
<button id="getWeekData">Week</button>

<table>
    <tr>
        <td>
            <ol>
                @for (int i = 0; i < 10; i++)
                {
                    <li><p>@Model.HourHashtagCounts[i].Hashtag.Name - @Model.HourHashtagCounts[i].TimesUsed</p></li>
                }
            </ol>
        </td>
    </tr>
</table>

@*Tweets Each Hour Line Graph Datasets*@
@{
    List<int> hashtag0DataList = new List<int>();
    List<int> hashtag1DataList = new List<int>();
    List<int> hashtag2DataList = new List<int>();
    List<int> hashtag3DataList = new List<int>();
    List<int> hashtag4DataList = new List<int>();
    List<int> hashtag5DataList = new List<int>();
    List<int> hashtag6DataList = new List<int>();
    List<int> hashtag7DataList = new List<int>();
    List<int> hashtag8DataList = new List<int>();
    List<int> hashtag9DataList = new List<int>();

    for (int i = 0; i < 12; i++)
    {
        hashtag0DataList.Add(Model.HourHashtagCounts[0].TweetsPer[i]);
        hashtag1DataList.Add(Model.HourHashtagCounts[1].TweetsPer[i]);
        hashtag2DataList.Add(Model.HourHashtagCounts[2].TweetsPer[i]);
        hashtag3DataList.Add(Model.HourHashtagCounts[3].TweetsPer[i]);
        hashtag4DataList.Add(Model.HourHashtagCounts[4].TweetsPer[i]);
        hashtag5DataList.Add(Model.HourHashtagCounts[5].TweetsPer[i]);
        hashtag6DataList.Add(Model.HourHashtagCounts[6].TweetsPer[i]);
        hashtag7DataList.Add(Model.HourHashtagCounts[7].TweetsPer[i]);
        hashtag8DataList.Add(Model.HourHashtagCounts[8].TweetsPer[i]);
        hashtag9DataList.Add(Model.HourHashtagCounts[9].TweetsPer[i]);
    }
}

@*graph made using the Charts.js Lib http://www.chartjs.org/*@
<canvas id="GraphCanvas"></canvas>

@*buttons will be used to toggle data for each hashtag on and off in the graph*@
<button id="hashtag0Button">@Model.HourHashtagCounts[0].Hashtag.Name.ToString()</button>
<button id="hashtag1Button">@Model.HourHashtagCounts[1].Hashtag.Name.ToString()</button>
<button id="hashtag2Button">@Model.HourHashtagCounts[2].Hashtag.Name.ToString()</button>
<button id="hashtag3Button">@Model.HourHashtagCounts[3].Hashtag.Name.ToString()</button>
<button id="hashtag4Button">@Model.HourHashtagCounts[4].Hashtag.Name.ToString()</button>
<button id="hashtag5Button">@Model.HourHashtagCounts[5].Hashtag.Name.ToString()</button>
<button id="hashtag6Button">@Model.HourHashtagCounts[6].Hashtag.Name.ToString()</button>
<button id="hashtag7Button">@Model.HourHashtagCounts[7].Hashtag.Name.ToString()</button>
<button id="hashtag8Button">@Model.HourHashtagCounts[8].Hashtag.Name.ToString()</button>
<button id="hashtag9Button">@Model.HourHashtagCounts[9].Hashtag.Name.ToString()</button>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.bundle.min.js"></script>
<script>
    @*convert C# lists of hashtag data to JSON*@
    var hashtag0DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag0DataList));
    var hashtag1DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag1DataList));
    var hashtag2DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag2DataList));
    var hashtag3DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag3DataList));
    var hashtag4DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag4DataList));
    var hashtag5DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag5DataList));
    var hashtag6DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag6DataList));
    var hashtag7DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag7DataList));
    var hashtag8DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag8DataList));
    var hashtag9DataListJSON = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(hashtag9DataList));

    @*Retrieve and save the string name of each hashtag*@
    var hashtag0Name = "@Model.HourHashtagCounts[0].Hashtag.Name.ToString()"
    var hashtag1Name = "@Model.HourHashtagCounts[1].Hashtag.Name.ToString()"
    var hashtag2Name = "@Model.HourHashtagCounts[2].Hashtag.Name.ToString()"
    var hashtag3Name = "@Model.HourHashtagCounts[3].Hashtag.Name.ToString()"
    var hashtag4Name = "@Model.HourHashtagCounts[4].Hashtag.Name.ToString()"
    var hashtag5Name = "@Model.HourHashtagCounts[5].Hashtag.Name.ToString()"
    var hashtag6Name = "@Model.HourHashtagCounts[6].Hashtag.Name.ToString()"
    var hashtag7Name = "@Model.HourHashtagCounts[7].Hashtag.Name.ToString()"
    var hashtag8Name = "@Model.HourHashtagCounts[8].Hashtag.Name.ToString()"
    var hashtag9Name = "@Model.HourHashtagCounts[9].Hashtag.Name.ToString()"

    @*Boolean to save hashtag button state *@
    @*First 3 are set to true because the page will load with them being displayed in the graph*@
    var hashtag0ButtonIsOn = true;
    var hashtag1ButtonIsOn = true;
    var hashtag2ButtonIsOn = true;
    var hashtag3ButtonIsOn = false;
    var hashtag4ButtonIsOn = false;
    var hashtag5ButtonIsOn = false;
    var hashtag6ButtonIsOn = false;
    var hashtag7ButtonIsOn = false;
    var hashtag8ButtonIsOn = false;
    var hashtag9ButtonIsOn = false;

    var hashtag0Color = "#0074D9";
    var hashtag1Color = "#7FDBFF";
    var hashtag2Color = "#39CCCC";
    var hashtag3Color = "#3D9970";
    var hashtag4Color = "#2ECC40";
    var hashtag5Color = "#FFDC00";
    var hashtag6Color = "#FF851B";
    var hashtag7Color = "#FF4136";
    var hashtag8Color = "#85144b";
    var hashtag9Color = "#B10DC9";

    @* Constats to be used as labels for the X axis of the graph*@
    var MINUTESAGO = ["5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60"];
    var HOURSOFDAY = ["12am", "1am", "2am", "3am", "4am", "5am", "6am", "7am", "9am", "10am", "11am", "12pm", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm", "9pm", "10pm", "11pm"];
    var DAYSAGO = ["1", "2", "3", "4", "5", "6", "7"];

    @*Logic for Charts.js line graph*@
    var Graph = {
        type: 'line',
        data: {
            labels: MINUTESAGO,
            datasets: [{
                label: hashtag0Name,
                backgroundColor: hashtag0Color,
                borderColor: hashtag0Color,
                data: hashtag0DataListJSON,
                fill: false
            },{
                label: hashtag1Name,
                backgroundColor: hashtag1Color,
                borderColor: hashtag1Color,
                data: hashtag1DataListJSON,
                fill: false
            }, {
                label: hashtag2Name,
                backgroundColor: hashtag2Color,
                borderColor: hashtag2Color,
                data: hashtag2DataListJSON,
                fill: false
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: "Tweets"
                    }
                }]
            },
            @*tooltips and hover cause label to appear at data point the cursor is closest to*@
            tooltips: {
                mode: 'index',
                intersect: false
            },
            hover: {
                mode: "nearest",
                intersect: true
            },
            responsive: true,
            maintainAspectRatio: true
        }
    };

    @*Load linegraph on page load*@
    window.onload = function () {
        var ctx = document.getElementById("GraphCanvas").getContext("2d");
        window.myLine = new Chart(ctx, Graph);
    };

    @*Add a dataset to the linegraph*@
    function addDataset(labelName, color, dataList) {
        var newDataset = {
            label: labelName,
            backgroundColor: color,
            borderColor: color,
            data: dataList,
            fill: false
        };
        Graph.data.datasets.push(newDataset);
    }

    @*Remove a dataset from the graph where the label name equals the search term*@
    function removeDataset(searchTerm) {
        var pos = -1;
        var len = Graph.data.datasets.length;
        for (var i = 0; i < len; i++) {
            if (Graph.data.datasets[i].label === searchTerm) {
                pos = i;
                break;
            }
        }
        Graph.data.datasets.splice(pos, 1);
    }


    @*Set on click listener for each button*@
    @*If button is already on, remove the corresponding data set*@
    @*If the button is off, add dataset to the graph*@
    @*toggle the button and then update the canvas*@

    document.getElementById("hashtag0Button").addEventListener("click", function () {
        if (hashtag0ButtonIsOn) {
            removeDataset(hashtag0Name);
        } else {
            addDataset(hashtag0Name, hashtag0Color, hashtag0DataListJSON)
        };
        hashtag0ButtonIsOn = !hashtag0ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag1Button").addEventListener("click", function () {
        if (hashtag1ButtonIsOn) {
            removeDataset(hashtag1Name);
        } else {
            addDataset(hashtag1Name, hashtag1Color, hashtag1DataListJSON)
        };
        hashtag1ButtonIsOn = !hashtag1ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag2Button").addEventListener("click", function () {
        if (hashtag2ButtonIsOn) {
            removeDataset(hashtag2Name);
        } else {
            addDataset(hashtag2Name, hashtag2Color, hashtag2DataListJSON)
        };
        hashtag2ButtonIsOn = !hashtag2ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag3Button").addEventListener("click", function () {
        if (hashtag3ButtonIsOn) {
            removeDataset(hashtag3Name);
        } else {
            addDataset(hashtag3Name, hashtag3Color, hashtag3DataListJSON)
        };
        hashtag3ButtonIsOn = !hashtag3ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag4Button").addEventListener("click", function () {
        if (hashtag4ButtonIsOn) {
            removeDataset(hashtag4Name);
        } else {
            addDataset(hashtag4Name, hashtag4Color, hashtag4DataListJSON)
        };
        hashtag4ButtonIsOn = !hashtag4ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag5Button").addEventListener("click", function () {
        if (hashtag5ButtonIsOn) {
            removeDataset(hashtag5Name);
        } else {
            addDataset(hashtag5Name, hashtag5Color, hashtag5DataListJSON)
        };
        hashtag5ButtonIsOn = !hashtag5ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag6Button").addEventListener("click", function () {
        if (hashtag6ButtonIsOn) {
            removeDataset(hashtag6Name);
        } else {
            addDataset(hashtag6Name, hashtag6Color, hashtag6DataListJSON)
        };
        hashtag6ButtonIsOn = !hashtag6ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag7Button").addEventListener("click", function () {
        if (hashtag7ButtonIsOn) {
            removeDataset(hashtag7Name);
        } else {
            addDataset(hashtag7Name, hashtag7Color, hashtag7DataListJSON)
        };
        hashtag7ButtonIsOn = !hashtag7ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag8Button").addEventListener("click", function () {
        if (hashtag8ButtonIsOn) {
            removeDataset(hashtag8Name);
        } else {
            addDataset(hashtag8Name, hashtag8Color, hashtag8DataListJSON)
        };
        hashtag8ButtonIsOn = !hashtag8ButtonIsOn;
        window.myLine.update();
    });

    document.getElementById("hashtag9Button").addEventListener("click", function () {
        if (hashtag9ButtonIsOn) {
            removeDataset(hashtag9Name);
        } else {
            addDataset(hashtag9Name, hashtag9Color, hashtag9DataListJSON)
        };
        hashtag9ButtonIsOn = !hashtag9ButtonIsOn;
        window.myLine.update();
    });
</script>